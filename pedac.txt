# AllCardsOnDeck

PEDAC

Problem
Example 
Data (data structures)
Code

        Problem:
        Create a new deck of cards with 52 strings 
        Ace of Clubs, Two of Hearts, Jack of Diamonds
        4 suits: Clubs, Diamonds, Hearts, Spades
        13 ranks: Ace, 2, 3, 4,... King

        Example Data
              "Ace of Hearts", "Two of Hearts", "Three of Hearts", "Four of Hearts", "Five of Hearts", "Six of Hearts", "Seven of Hearts", "Eight of Hearts", "Nine of Hearts", "Ten of Hearts", "Jack of Hearts", "Queen of Hearts", "King of Hearts",

               "Ace of Spades", "Two of Spades", "Three of Spades,", "Four of Spades", "Five of Spades", "Six of Spades", "Seven of Spades", "Eight of Spades", "Nine of Spades", "Ten of Spades", "Jack of Spades", "Queen of Spades", "King of Spades",

               "Ace of Diamonds", "Two of Diamonds", "Three of Diamonds", "Four of Diamonds", "Five of Diamonds", "Six of Diamonds", "Seven of Diamonds", "Eight of Diamonds", "Nine of Diamonds", "Ten of Diamonds", "Jack of Diamonds", "Queen of Diamonds", "King of Diamonds",

              "Ace of Spades", "Two of Spades", "Three of Spades", "Four of Spades", "Five of Spades", "Six of Spades", "Seven of Spades", "Eight of Spades", "Nine of Spades", "Ten of Spades", "Jack of Spades", "Queen of Spades", "King of Spades" 

        Data Structures (tools to use during process):
              strings
              List
              Looping?
              There are four suits: "Clubs", "Diamonds", "Hearts", and "Spades".
              There are 13 ranks: "Ace", "2", "3", "4", "5", "6", "7", "8", "9", "10", "Jack", "Queen", and "King".

        Algorithm:
        

              Algorithm A) 
              -Make new list of strings named 'deck'
              -Initialize the list of strings with 52 explicitly stated cards from our example sections
              -Shuffle them with fischer Yates 
              (paste Algorithm here)

              numberOfCards = length of our deck

              for rightIndex from numberOfCards - 1 down to 1 do:
                leftIndex = random integer that is greater than or equal to 0 and LESS than rightIndex. See the section "How do we get a random integer")


  Now swap the values at rightIndex and leftIndex by doing this:
    leftCard = the value from deck[leftIndex]
    rightCard = the value from deck[rightIndex]
    deck[rightIndex] = leftCard
    deck[leftIndex] = rightCard

    -first card = deck[0]
    -second card = deck[1]
    -print first and second card

              Algorithm B)
              -make a list of the 4 suits and call this list 'suits'
              -make a list of the 13 ranks and call this list 'ranks'
              -Make new list of strings named 'deck'
              -Make a loop that goes though the list of 'suits'
              -make a loop that goes through the list 'ranks'
                -for each rank, make a new string of the form $"{rank} of ${suits}"
                -add that newly formed string to the end of the deck list
              -same as Algorithm A